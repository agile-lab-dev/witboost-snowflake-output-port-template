apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: cdp-snowflake-outputport-template.1
  title: Output Port CDP Snowflake Template
  description: Create a repository containing the definition of a CDP Snowflake Output Port
  mesh:
    icon: https://avatars.githubusercontent.com/u/6453780?s=280&v=4
  tags:
    - snowflake
    - cdp
    - workload
spec:
  owner: agilelab
  type: outputport

  parameters:
    - title: Component basic information
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required name used for display purposes
          ui:field: EntityNamePicker
          default: Snowflake CDP Output Port
          ui:options:
            allowArbitraryValues: true
        fullyQualifiedName:
          title: Fully Qualified Name
          type: string
          description: Workload fully qualified name
        description:
          title: Description
          type: string
          description: Help others understand what this Workload is for
        domain:
          title: Domain
          type: string
          description: Domain of the Data Product this Workload belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds: 
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Data Product this Workload belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds: 
              - System
        identifier:
          title: Identifier
          type: string
          description: A unique identifier for the entity inside the domain. It will not be editable after creation and is expected to be a string that is sequences of [a-zA-Z] separated by any of [-_]. An example could be 'finance-customer'
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: DevelopmentGroup
          type: string
          description: Data Product development group
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Depends on
          type: array
          default: []
          items:
            type: string
            ui:field: EntityComponentsPicker
            ui:fieldName: dataproduct
            ui:options:
              allowArbitraryValues: false
          description: An Output Port could depend on other output ports or storage areas

    - title: Provide some additional information
      properties:
        processDescription:
          title: Process Description
          type: string
          description: what is the underlying process that contributes to generate the data exposed by this output port
        intervalOfChange:
          title: Interval of change
          type: string
          description: how often changes in the data are reflected
        timeliness:
          title: Timeliness
          type: string
          description: the skew between the time that a business fact occuts and when it becomes visibile in the data
        upTime:
          title: Up time
          type: string
          description: the percentage of port availability
        termsAndConditions:
          title: Terms and conditions
          type: string
          description: If the data is usable only in specific environments
        endpoint:
          title: Endpoint
          type: string
          description: this is the API endpoint that self-describe the output port and provide insightful information at runtime about the physical location of the data, the protocol must be used, etc.


    - title: Data sharing agreements information
      properties:
        purpose:
          title: Purpose
          type: string
          description: what is the goal of this data set
        billing:
          title: Billing
          type: string
          description: how a consumer will be charged back when it consumes this output port
        security:
          title: Security
          type: string
          description: additional information related to security aspects, like restrictions, maskings, sensibile information and privacy
        intendedUsage:
          title: IntendedUsage
          type: string
          description: any other information needed by the consumer in order to effectively consume the data, it could be related to technical stuff (e.g. extract no more than one year of data for good performances ) or to business domains (e.g. this data is only useful in the marketing domains)
        limitations:
          title: Limitations
          type: string
          description: If any limitation is present it must be made super clear to the consumers
        lifeCycle:
          title: LifeCycle
          type: string
          description: Describe how the data will be historicized and how and when it will be deleted
        confidentiality:
          title: Confidentiality
          type: string
          description: Describe what a consumer should do to keep the information confidential, how to process and store it. Permission to share or report it.

    - title: Provide Output port deployment information
      required:
        - destinationName
        - host
        - schema
        - database
        - warehouse
      properties:
        destinationName:
          title: destinationName
          type: string
          description: Name of the destination
        host:
          title: Host
          type: string
          description: Enter your Snowflake account's locator (in the format ...snowflakecomputing.com)
        warehouse:
          title: Warehouse
          type: string
          description: Name of the Warehouse
        database:
          title: Database
          type: string
          description: Name of the Database within the Schema
        schema:
          title: Schema
          type: string
          description: Name of the Schema

    - title: Provide Output Port ACL (Access Control List)
      properties:
        owners:
          title: Owners
          type: array
          items:
            type: string
          default: []
          description: List of owner users with Read / Write Access
        users:
          title: Users
          type: array
          items:
            type: string
          default: []
          description: List of users with Read Access


    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com
        rootDirectory:
          title: Root Directory
          type: string
          description: Path that will be used as the repository root for this component
          default: .

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '${{ parameters.rootDirectory }}'
        values:
          name: '${{ parameters.name }}'
          fullyQualifiedName: '${{ parameters.fullyQualifiedName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          processDescription: '${{ parameters.processDescription }}'
          intervalOfChange: '${{ parameters.intervalOfChange }}'
          timeliness: '${{ parameters.timeliness }}'
          upTime: '${{ parameters.upTime }}'
          termsAndConditions: '${{ parameters.termsAndConditions }}'
          endpoint: '${{ parameters.endpoint }}'
          purpose: '${{ parameters.purpose }}'
          billing: '${{ parameters.billing }}'
          security: '${{ parameters.security }}'
          intendedUsage: '${{ parameters.intendedUsage }}'
          limitations: '${{ parameters.limitations }}'
          lifeCycle: '${{ parameters.lifeCycle }}'
          confidentiality: '${{ parameters.confidentiality }}'
          destinationName: '${{parameters.destinationName}}'
          host: '${{parameters.host}}'
          schema: '${{parameters.schema}}'
          database: '${{parameters.database}}'
          warehouse: '${{parameters.warehouse}}'
          owners: '${{ parameters.owners }}'
          users: '${{ parameters.users }}'
          creationDate: '${{ parameters.creationDate }}' # Not sure on how it's getting data.
          useCaseTemplateId: urn:dmb:utm:cdp-snowflake-outputport-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:cdp-snowflake-outputport-provisioner:0
          destination: '${{ parameters.repoUrl | parseRepoUrl }}'
          displayName: '${{ parameters.displayName }}'
          artifact_id: '${{ parameters.name }}' # Not Sure on this, would need to verify whether to include (or) not.
          useCaseTemplateVersion: 0.0.0


    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: '${{ parameters.repoUrl }}'
        rootDirectory: '${{ parameters.rootDirectory }}'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/${{ parameters.rootDirectory }}/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
