apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.identifier }}
  description: ${{ values.description | dump }}
  annotations:
    gitlab.com/project-slug: ${{ values.destination.owner + "/" + values.destination.repo }}
    backstage.io/techdocs-ref: dir:.
  tags:
    - outputport
    - snowflake
    - cdp
spec:
  type: workload
  lifecycle: experimental
  owner: ${{ values.developmentGroup | dump }}
  system: ${{ values.dataproduct | dump }}
  domain: ${{ values.domain | dump }}
  mesh:
    name: ${{ values.name | dump }}
    fullyQualifiedName: ${{ values.fullyQualifiedName | dump }}
    description: ${{ values.description | dump }}
    kind: outputport
    version: ${{ values.identifier.split(".")[2] + ".0.0" }}
    infrastructureTemplateId: ${{ values.infrastructureTemplateId }}
    useCaseTemplateId: ${{ values.useCaseTemplateId }}
    dependsOn: {% if values.dependsOn | length > 0 %}{% for i in values.dependsOn %}
      - ${{ i }}{% endfor %}{% else %}[]{% endif %}
    platform: CDP on Snowflake
    technology: Snowflake
    outputPortType: Files
    creationDate: ${{ values.creationDate }}
    startDate: ${{ values.creationDate }}
    processDescription: ${{ values.processDescription }}
    dataContract:
      schema: []
      termsAndConditions: ${{ values.termsAndConditions | dump }}
      endpoint: ${{ values.endpoint | dump }}
      SLA:
        intervalOfChange: ${{ values.intervalOfChange }}
        timeliness: ${{ values.timeliness }}
        upTime: ${{ values.upTime }}
    dataSharingAgreements:
      purpose: ${{ values.purpose | dump }}
      billing: ${{ values.billing | dump }}
      security: ${{ values.security | dump }}
      intendedUsage: ${{ values.intendedUsage | dump }}
      limitations: ${{ values.limitations | dump }}
      lifeCycle: ${{ values.lifeCycle | dump }}
      confidentiality: ${{ values.confidentiality | dump }}
    tags: []
    sampleData: {}
    semanticLinking: []
    specific:
      destinationName: ${{ values.destinationName }}
      host: ${{ values.host }}
      schema: ${{ values.schema }}
      database: ${{ values.database }}
      warehouse: ${{ values.warehouse }}
      acl:
        owners: {% if values.owners | length > 0 %}{% for i in values.owners %}
          - ${{ i }}{{% endfor %}}{% else %}[]{% endif %}
        users: {% if values.users | length > 0 %}{% for i in values.users %}
          - ${{ i }}{{% endfor %}}{% else %}[]{% endif %}